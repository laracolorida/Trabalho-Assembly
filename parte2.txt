addi t0, x0, 0b1010000 #define t0 como o numero float

srli t1, t0, 4 # define t1 como o expoente - 101
andi t2, t0, 0b1111 # define t2 como a mantissa - 0000

#e -3 +48 = e +45
addi t5, t1, -3 # define t5 como e-3
blt t5, x0, NEGATIVO # verifica se o expoente é negativo
addi t6, x0, 43 # define t6 como + com o valor da tabela ASCII
jal CONV_ASCII # pula para a conversão de ASCII
NEGATIVO: addi t6, x0, -1 # define t6 = -1 
mul t5, t5, t6 # usamos t6 para transformar t5 em positivo
addi t6, x0, 45 # define t6 como - com o valor da tabela ASCII
CONV_ASCII: addi t5, t5, 48 # define t5 como o expoente com o valor da tabela ASCII

#primeira linha da impressão
addi t3,x0,50 # define t3 como 2 com o valor da tabela ASCII
addi t4, x0, 94 # define t4 como ^ com o valor da tabela ASCII
slli t4, t4, 8 # desloca os bits para o lugar do proximo caractere
slli t6, t6, 16 # desloca os bits para o lugar do proximo caractere
slli t5, t5, 24 # desloca os bits para o lugar do proximo caractere
or t3, t3, t4 # junta os valores dos caracteres em um unico registrador
or t3, t3, t5 # junta os valores dos caracteres em um unico registrador
or t3, t3, t6 # junta os valores dos caracteres em um unico registrador
sw t3, 0(gp) # salva o valor dos caracteres de t na linha de gp

#segunda linha da impressão
addi t3, x0, 49 # define t0 como 1 com o valor da tabela ASCII
addi t4, x0, 46 # define t1 como . com o valor da tabela ASCII
slli t4, t4, 8 # desloca os bits para o lugar do proximo caractere
or t3, t3, t4 # junta os valores dos caracteres em um unico registrador
sw t3, 4(gp) # salva o valor dos caracteres de t03 na linha gp + 4

# switch para descobrir o valor da mantissa
addi t3, x0, 0b0000 
beq t3, t2, ZERO # case 0
addi t3, x0, 0b1000
beq t3, t1, MEIO # case 2^⁻1
addi t3, x0, 0b0100
beq t3, t2, QUARTO # case 2^⁻2
addi t3, x0, 0b0010
beq t3, t2, OITAVO # case 2^⁻3
addi t3, x0, 0b0001
beq t3, t2, DEZESSEISAVOS # case 2^⁻4
addi t3, x0, 0b1100
beq t3, t2, MEIO_QUARTO # case 2^⁻1 + 2^-2
addi t3, x0, 0b1010
beq t3, t2, MEIO_OITAVO # case 2^⁻1 + 2^-3
addi t3, x0, 0b1001
beq t3, t2, MEIO_DEZESSEISAVOS # case 2^⁻1 + 2^-4
addi t3, x0, 0b0110
beq t3, t2, QUARTO_OITAVO # case 2^⁻2 + 2^-3
addi t3, x0, 0b0101
beq t3, t2, QUARTO_DEZESSEISAVOS # case 2^⁻2 + 2^-4
addi t3, x0, 0b0011
beq t3, t2, OITAVO_DEZESSEISAVOS # case 2^⁻3 + 2^-4
addi t3, x0, 0b1110
beq t3, t2, MEIO_QUARTO_OITAVO # case 2^⁻1 + 2^-2 + 2^-3
addi t3, x0, 0b1101
beq t3, t2, MEIO_QUARTO_DEZESSEISAVOS # case 2^⁻1 + 2^-2 + 2^-4
addi t3, x0, 0b0111
beq t3, t2, MEIO_OITAVO_DEZESSEISAVOS # case 2^⁻1 + 2^-3 + 2^-4
addi t3, x0, 0b1011
beq t3, t2, QUARTO_OITAVO_DEZESSEISAVOS # case 2^⁻2 + 2^-3 + 2^-4
addi t3, x0, 0b1111
beq t3, t2, MEIO_QUARTO_OITAVO_DEZESSEISAVOS # case 2^⁻1 + 2^⁻2 + 2^-3 + 2^-4


#ZERO: addi, t0, x0, 5
#jal 

